https://leetcode.com/problems/human-traffic-of-stadium/

X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, visit_date, people

Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).

For example, the table stadium:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 1    | 2017-01-01 | 10        |
| 2    | 2017-01-02 | 109       |
| 3    | 2017-01-03 | 150       |
| 4    | 2017-01-04 | 99        |
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-08 | 188       |
+------+------------+-----------+
For the sample data above, the output is:

+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-08 | 188       |
+------+------------+-----------+
Note:
Each day only have one row record, and the dates are increasing with id increasing.


solutions:

# Write your MySQL query statement below

1

with temp as
(
select s1.id from
stadium s1 join stadium s2
on s1.id = (s2.id - 1)
join stadium s3
on s1.id = (s3.id - 2)
where s3.people >= 100 and s1.people >=100 and s2.people >= 100
)

select s4.id, s4.visit_date, s4.people from
stadium s4
where s4.id in (select * from temp) 
or (s4.id - 1) in (select * from temp)
or (s4.id - 2) in (select * from temp)
group by s4.id, s4.visit_date, s4.people


2 one good solution in discussion

#3id+3 is the sum of three consecutive numbers including current number
#we match the number above to sum generated using a window function to validate if the three rows are consecutive
'''
with abc as (
select id,visit_date,people, 3*id+3 as nsum1
,sum(id) over (order by id rows between current row and 2 following) as nsum2
from stadium where people>=100 )

select distinct b.* from abc a
join stadium b on b.id between a.id and a.id+2
and a.nsum1=a.nsum2

order by b.id
