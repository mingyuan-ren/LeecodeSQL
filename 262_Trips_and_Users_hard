https://leetcode.com/problems/trips-and-users/submissions/

The Trips table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).

+----+-----------+-----------+---------+--------------------+----------+
| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|
+----+-----------+-----------+---------+--------------------+----------+
| 1  |     1     |    10     |    1    |     completed      |2013-10-01|
| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|
| 3  |     3     |    12     |    6    |     completed      |2013-10-01|
| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|
| 5  |     1     |    10     |    1    |     completed      |2013-10-02|
| 6  |     2     |    11     |    6    |     completed      |2013-10-02|
| 7  |     3     |    12     |    6    |     completed      |2013-10-02|
| 8  |     2     |    12     |    12   |     completed      |2013-10-03|
| 9  |     3     |    10     |    12   |     completed      |2013-10-03| 
| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|
+----+-----------+-----------+---------+--------------------+----------+
The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).

+----------+--------+--------+
| Users_Id | Banned |  Role  |
+----------+--------+--------+
|    1     |   No   | client |
|    2     |   Yes  | client |
|    3     |   No   | client |
|    4     |   No   | client |
|    10    |   No   | driver |
|    11    |   No   | driver |
|    12    |   No   | driver |
|    13    |   No   | driver |
+----------+--------+--------+
Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.

For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.

+------------+-------------------+
|     Day    | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 |       0.33        |
| 2013-10-02 |       0.00        |
| 2013-10-03 |       0.50        |
+------------+-------------------+


solutions:

1

# Write your MySQL query statement below

with t4 as
(select t3.Id, t3.Status, t3.Request_at
from Trips t3
where t3.Id not in
(
    select distinct(t1.Id)
    from Trips t1 join Users t2
    on t1.Client_Id = t2.Users_Id or t1.Driver_Id = t2.Users_Id
    where t2.Banned = 'Yes'
)
and
t3.Request_at between '2013-10-01' and '2013-10-03')

select t6.Request_at AS 'Day', round(ifnull(1-t5.comp/t6.alltrips, 1), 2) as 'Cancellation Rate'
from
(
select t4.Request_at, count(t4.Id) as 'comp'
from t4
where t4.Status = 'completed'
group by t4.Request_at
) t5
right join
(
select t4.Request_at, count(t4.Id) as 'alltrips'
from t4 group by t4.Request_at
) t6
on t5.Request_at = t6.Request_at


2 one solution beats 100% users in discussion

select request_at Day, ROUND(AVG(status like 'cancelled%'), 2) 'Cancellation Rate'
from Trips 
where request_at between '2013-10-01' and '2013-10-03' 
and 'no' = all(select Banned from Users where Users_id in (client_id, driver_id))
group by 1
order by 1;
